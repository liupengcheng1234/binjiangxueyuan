from scipy.ndimage import filters 
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

def compute_harris_respose(im,sigma=3):
    imx=np.zeros(im.shape)
    filters.gaussian_filter(im,(sigma,sigma),(0,1),imx)
    imy=np.zeros(im.shape)
    filters.gaussian_filter(im,(sigma,sigma),(1,0),imy)
    Wxx=filters.gaussian_filter(imx*imx,sigma)
    Wxy=filters.gaussian_filter(imx*imy,sigma)
    Wyy=filters.gaussian_filter(imy*imy,sigma)
    Wdet=Wxx*Wyy-Wxy*2Wtr=Wxx+Wyy
    return Wdet/Wtr

def get_harris_points(harrisim,min_dist=10,threshold=0.1):
    corner_threshold=harrisim.max()*thresholdharrisim_t=(harrisim>corner_threshold)*1
    coords=np.array(harrisim_t.nonzero()).T
    candidate_values=[harrisim[c[0],c[1]]forcincoords]
    index=np.argsort(candidate_values)allowed_locations=np.zeros(harrisim.shape)
    allowed_locations[min_dist:-min_dist,min_dist:-min_dist]=1
    filtered_coords=[]
    for i inindex:
        if(allowed_locations[coords[i,0],coords[i,1]]==1):
            filtered_coords.append(coords[i])
            allowed_locations[(coords[i,0]-min_dist):(coords[i,0]+min_dist),\
        (coords[i,1]-min_dist):(coords[i,1]+min_dist)]=0returnfiltered_coords


def plot_harris_points(image,filtered_coords):
    plt.figure()
    plt.gray()
    plt.imshow(image)
    plt.plot([p[1]forpinfiltered_coords],[p[0]forpinfiltered_coords],'*')
    plt.axis('off')
    plt.show()


im=np.array(Image.open('../../data/ComputerVision/harris/first.png').convert('L'))
harrisim=compute_harris_respose(im)
filtered_coords=get_harris_points(harrisim,20)
plot_harris_points(im,filtered_coords)
